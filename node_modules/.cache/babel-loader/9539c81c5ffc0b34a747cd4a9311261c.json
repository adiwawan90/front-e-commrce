{"ast":null,"code":"import _defineProperty from \"/home/adi/Documents/zalora/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/adi/Documents/zalora/src/Context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { storeProducts, detailProduct } from './data';\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // produk: storeProducts, // jika produk lgsung di inisiasi maka nilai dalam data tdk akan bisa terubah,\n      //makanya produk akan kina inisiasi dgn Arra kosong dahulu\n      produk: [],\n      detailProduk: detailProduct,\n      cart: [],\n      cartSubtotal: 0,\n      cartTotal: 0\n    };\n\n    this.setProduk = () => {\n      let tempProduk = [];\n      storeProducts.forEach(item => {\n        const singleItem = _objectSpread({}, item);\n\n        tempProduk = [...tempProduk, singleItem];\n      });\n      this.setState(() => {\n        return {\n          produk: tempProduk\n        };\n      });\n    };\n\n    this.getItem = id => {\n      const produk = this.state.produk.find(item => item.id === id);\n      return produk;\n    };\n\n    this.handleDetail = id => {\n      const produk = this.getItem(id);\n      this.setState({\n        detailProduk: produk\n      });\n    };\n\n    this.addToCart = id => {\n      let tempProduk = [...this.state.produk];\n      const index = tempProduk.indexOf(this.getItem(id));\n      const produk = tempProduk[index];\n      produk.inCart = true;\n      produk.count = 1;\n      const price = produk.price;\n      produk.total = price;\n      this.setState(() => {\n        return {\n          produk: tempProduk,\n          cart: [...this.state.cart, produk]\n        };\n      });\n    };\n  }\n\n  //ini fungsi setelah semua component di render oleh browser\n  componentDidMount() {\n    this.setProduk();\n  } //membuat fungsi utk men-set isi Produk\n\n\n  render() {\n    return React.createElement(ProductContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["/home/adi/Documents/zalora/src/Context.js"],"names":["React","Component","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","state","produk","detailProduk","cart","cartSubtotal","cartTotal","setProduk","tempProduk","forEach","item","singleItem","setState","getItem","id","find","handleDetail","addToCart","index","indexOf","inCart","count","price","total","componentDidMount","render","props","children","ProductConsumer","Consumer"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,QAA7C;AAEA,MAAMC,cAAc,GAAGJ,KAAK,CAACK,aAAN,EAAvB;;AAEA,MAAMC,eAAN,SAA8BL,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAEtCM,KAFsC,GAE9B;AACN;AACA;AACAC,MAAAA,MAAM,EAAE,EAHF;AAINC,MAAAA,YAAY,EAAEN,aAJR;AAKNO,MAAAA,IAAI,EAAE,EALA;AAMNC,MAAAA,YAAY,EAAE,CANR;AAONC,MAAAA,SAAS,EAAE;AAPL,KAF8B;;AAAA,SAkBtCC,SAlBsC,GAkB1B,MAAM;AAChB,UAAIC,UAAU,GAAG,EAAjB;AACAZ,MAAAA,aAAa,CAACa,OAAd,CAAsBC,IAAI,IAAI;AAC5B,cAAMC,UAAU,qBAAQD,IAAR,CAAhB;;AACAF,QAAAA,UAAU,GAAG,CAAC,GAAGA,UAAJ,EAAgBG,UAAhB,CAAb;AACD,OAHD;AAIA,WAAKC,QAAL,CAAc,MAAM;AAClB,eAAO;AAAEV,UAAAA,MAAM,EAAEM;AAAV,SAAP;AACD,OAFD;AAGD,KA3BqC;;AAAA,SA6BtCK,OA7BsC,GA6B5BC,EAAE,IAAI;AACd,YAAMZ,MAAM,GAAG,KAAKD,KAAL,CAAWC,MAAX,CAAkBa,IAAlB,CAAuBL,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYA,EAA3C,CAAf;AACA,aAAOZ,MAAP;AACD,KAhCqC;;AAAA,SAmCtCc,YAnCsC,GAmCvBF,EAAE,IAAI;AACnB,YAAMZ,MAAM,GAAG,KAAKW,OAAL,CAAaC,EAAb,CAAf;AACA,WAAKF,QAAL,CAAc;AACZT,QAAAA,YAAY,EAAED;AADF,OAAd;AAGD,KAxCqC;;AAAA,SA6CtCe,SA7CsC,GA6C1BH,EAAE,IAAI;AAChB,UAAIN,UAAU,GAAG,CAAC,GAAG,KAAKP,KAAL,CAAWC,MAAf,CAAjB;AACA,YAAMgB,KAAK,GAAGV,UAAU,CAACW,OAAX,CAAmB,KAAKN,OAAL,CAAaC,EAAb,CAAnB,CAAd;AACA,YAAMZ,MAAM,GAAGM,UAAU,CAACU,KAAD,CAAzB;AACAhB,MAAAA,MAAM,CAACkB,MAAP,GAAgB,IAAhB;AACAlB,MAAAA,MAAM,CAACmB,KAAP,GAAe,CAAf;AACA,YAAMC,KAAK,GAAGpB,MAAM,CAACoB,KAArB;AACApB,MAAAA,MAAM,CAACqB,KAAP,GAAeD,KAAf;AACA,WAAKV,QAAL,CAAc,MAAM;AAClB,eAAO;AAAEV,UAAAA,MAAM,EAAEM,UAAV;AAAsBJ,UAAAA,IAAI,EAAE,CAAC,GAAG,KAAKH,KAAL,CAAWG,IAAf,EAAqBF,MAArB;AAA5B,SAAP;AACD,OAFD;AAGD,KAxDqC;AAAA;;AAYtC;AACAsB,EAAAA,iBAAiB,GAAG;AAClB,SAAKjB,SAAL;AACD,GAfqC,CAiBtC;;;AAwCAkB,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,MAAA,KAAK,oBACA,KAAKxB,KADL;AAEHe,QAAAA,YAAY,EAAE,KAAKA,YAFhB;AAGHC,QAAAA,SAAS,EAAE,KAAKA;AAHb,QADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,KAAKS,KAAL,CAAWC,QAPd,CADF;AAWD;;AArEqC;;AAwExC,MAAMC,eAAe,GAAG9B,cAAc,CAAC+B,QAAvC;AAEA,SAAS7B,eAAT,EAA0B4B,eAA1B","sourcesContent":["import React, { Component } from 'react';\nimport { storeProducts, detailProduct } from './data';\n\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component {\n  //untuk menampung produk & detail\n  state = {\n    // produk: storeProducts, // jika produk lgsung di inisiasi maka nilai dalam data tdk akan bisa terubah,\n    //makanya produk akan kina inisiasi dgn Arra kosong dahulu\n    produk: [],\n    detailProduk: detailProduct,\n    cart: [],\n    cartSubtotal: 0,\n    cartTotal: 0\n  };\n\n  //ini fungsi setelah semua component di render oleh browser\n  componentDidMount() {\n    this.setProduk();\n  }\n\n  //membuat fungsi utk men-set isi Produk\n  setProduk = () => {\n    let tempProduk = [];\n    storeProducts.forEach(item => {\n      const singleItem = { ...item };\n      tempProduk = [...tempProduk, singleItem];\n    });\n    this.setState(() => {\n      return { produk: tempProduk };\n    });\n  };\n\n  getItem = id => {\n    const produk = this.state.produk.find(item => item.id === id);\n    return produk;\n  };\n\n  //mengecek berhasil apa tidak saat di klik\n  handleDetail = id => {\n    const produk = this.getItem(id);\n    this.setState({\n      detailProduk: produk\n    });\n  };\n  //   addToCart = id => {\n  //     console.log('ke Cart, isinya :' + id + '');\n  //   };\n\n  addToCart = id => {\n    let tempProduk = [...this.state.produk];\n    const index = tempProduk.indexOf(this.getItem(id));\n    const produk = tempProduk[index];\n    produk.inCart = true;\n    produk.count = 1;\n    const price = produk.price;\n    produk.total = price;\n    this.setState(() => {\n      return { produk: tempProduk, cart: [...this.state.cart, produk] };\n    });\n  };\n  render() {\n    return (\n      <ProductContext.Provider\n        value={{\n          ...this.state,\n          handleDetail: this.handleDetail,\n          addToCart: this.addToCart\n        }}\n      >\n        {this.props.children}\n      </ProductContext.Provider>\n    );\n  }\n}\n\nconst ProductConsumer = ProductContext.Consumer;\n\nexport { ProductProvider, ProductConsumer };\n"]},"metadata":{},"sourceType":"module"}